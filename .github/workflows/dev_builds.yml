name: Dev builds

on:
  push:
    branches:
      - main
      - 'dev-build/*'

defaults:
  run:
    shell: bash

jobs:

  # Add lint to dev builds as that's the only way for cache to be shared across branches.
  # https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
  lint:
    name: Lint (golangci-lint)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch_os: [ 'linux_amd64' ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v3
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - uses: actions/cache@v3
        with:
          path: |
            /home/runner/.cache/golangci-lint
          key: ${{matrix.arch_os}}-golangcilint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-golangcilint-

      - name: Install golangci-lint
        run: make install-golangci-lint

      - name: Add opentelemetry-collector-builder installation dir to PATH
        run: echo "$HOME/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: make golint

  build:
    name: Build
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - arch_os: windows_amd64
            runs_on: windows-2022
            builder_bin_path: '${RUNNER_TEMP}\bin'
            builder_bin_ext: .exe
    steps:
      - uses: actions/checkout@v3

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v3
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /Users/runner/go/pkg/mod
            /Users/runner/Library/Caches/go-build
            /c/Users/runneradmin/go/pkg/mod
            /c/Users/runneradmin/AppData/Local/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - name: Set default BUILDER_BIN_PATH
        run: echo "BUILDER_BIN_PATH=${HOME}/bin" >> $GITHUB_ENV

      - name: Override BUILDER_BIN_PATH if set in matrix
        run: echo "BUILDER_BIN_PATH=${{matrix.builder_bin_path}}" >> $GITHUB_ENV
        if: matrix.builder_bin_path != ''

      - name: Add opentelemetry-collector-builder installation dir to PATH
        run: echo "$BUILDER_BIN_PATH" >> $GITHUB_PATH

      - name: Install opentelemetry-collector-builder
        run: make install-builder
        working-directory: ./otelcolbuilder

      - name: Build
        run: make otelcol-sumo-${{matrix.arch_os}}
        working-directory: ./otelcolbuilder

      - name: Show included modules
        working-directory: ./otelcolbuilder/cmd
        run: |
          go version -m otelcol-sumo-${{matrix.arch_os}}${{matrix.builder_bin_ext}} | \
          grep -E "/(receiver|exporter|processor|extension)/" | \
          tee otelcol-sumo-${{matrix.arch_os}}_modules.txt

      # TODO:
      # Move that out to a separate job and run on a corresponding's OS runner.
      # - name: Run the binary
      #   run: ./otelcol-sumo-${{matrix.arch_os}} --version
      #   working-directory: ./otelcolbuilder/cmd/

      - name: Store binary as action artifact
        uses: actions/upload-artifact@v3
        with:
          name: otelcol-sumo-${{matrix.arch_os}}
          path: ./otelcolbuilder/cmd/otelcol-sumo-${{matrix.arch_os}}${{matrix.builder_bin_ext}}
          if-no-files-found: error

      - name: Store list of included modules as action artifact
        uses: actions/upload-artifact@v3
        with:
          name: otelcol-sumo-${{matrix.arch_os}}_modules.txt
          path: ./otelcolbuilder/cmd/otelcol-sumo-${{matrix.arch_os}}_modules.txt
          if-no-files-found: error

  package-msi:
    name: Package MSI
    runs-on: windows-2019
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      - name: Fetch binary artifact for windows/amd64
        uses: actions/download-artifact@v3
        with:
          name: otelcol-sumo-windows_amd64
          path: ./otelcolbuilder/cmd

      - name: Sign binary
        uses: skymatic/code-sign-action@v1
        with:
          certificate: '${{ secrets.MICROSOFT_CERTIFICATE }}'
          password: '${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}'
          certificatesha1: '${{ secrets.MICROSOFT_CERTHASH }}'
          certificatename: '${{ secrets.MICROSOFT_CERTNAME }}'
          description: '${{ secrets.MICROSOFT_DESCRIPTION }}'
          folder: ./otelcolbuilder/cmd

      - name: Set OVERRIDE_INTERNAL_VERSION
        run: echo "OVERRIDE_INTERNAL_VERSION=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Set PRODUCT_VERSION
        run: echo "PRODUCT_VERSION=$(./ci/get_productversion.sh)" >> $GITHUB_ENV

      - name: Build MSI for windows/amd64
        working-directory: ./packaging/msi/wix
        run: msbuild.exe -p:Configuration=Release -p:Platform=x64 -p:ProductVersion=$PRODUCT_VERSION -Restore

      - name: Sign MSI
        uses: skymatic/code-sign-action@v1
        with:
          certificate: '${{ secrets.MICROSOFT_CERTIFICATE }}'
          password: '${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}'
          certificatesha1: '${{ secrets.MICROSOFT_CERTHASH }}'
          certificatename: '${{ secrets.MICROSOFT_CERTNAME }}'
          description: '${{ secrets.MICROSOFT_DESCRIPTION }}'
          folder: ./packaging/msi/wix/bin/x64/en-US

      - name: Store MSI as action artifact for windows/amd64
        uses: actions/upload-artifact@v3
        with:
          name: windows_amd64_msi
          path: ./packaging/msi/wix/bin/x64/en-US/*.msi
          if-no-files-found: error
