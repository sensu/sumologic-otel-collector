name: Releases

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'

      - 'v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-alpha.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-beta.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-rc.[0-9]+'

defaults:
  run:
    shell: bash

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - arch_os: windows_amd64
            runs_on: windows-2022
            builder_bin_path: '${RUNNER_TEMP}\bin'
            builder_bin_ext: .exe
    steps:
      - uses: actions/checkout@v3

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v3
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /c/Users/runneradmin/go/pkg/mod
            /c/Users/runneradmin/AppData/Local/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - name: Set default BUILDER_BIN_PATH
        run: echo "BUILDER_BIN_PATH=${HOME}/bin" >> $GITHUB_ENV

      - name: Override BUILDER_BIN_PATH if set in matrix
        run: echo "BUILDER_BIN_PATH=${{matrix.builder_bin_path}}" >> $GITHUB_ENV
        if: matrix.builder_bin_path != ''

      - name: Extract tag
        id: extract_tag
        run: echo "::set-output name=tag::$(echo ${GITHUB_REF#refs/tags/v})"

      - name: Print tag
        run: echo "${{ steps.extract_tag.outputs.tag }}"

      - name: Add opentelemetry-collector-builder installation dir to PATH
        run: echo "$BUILDER_BIN_PATH" >> $GITHUB_PATH

      - name: Install opentelemetry-collector-builder
        run: make install-builder
        working-directory: ./otelcolbuilder

      - name: Prepare tags in otelcolbuilder's config
        run: make prepare-tag TAG=${{ steps.extract_tag.outputs.tag }}

      - name: Build
        run: make otelcol-sumo-${{matrix.arch_os}}
        working-directory: ./otelcolbuilder

      - name: Set filename
        id: set_filename
        run: echo "::set-output name=filename::$(echo otelcol-sumo-${{ steps.extract_tag.outputs.tag }}-${{matrix.arch_os}})${{matrix.builder_bin_ext}}"

      - name: Rename to include tag in filename
        run: cp otelcol-sumo-${{matrix.arch_os}}${{matrix.builder_bin_ext}} ${{ steps.set_filename.outputs.filename }}
        working-directory: ./otelcolbuilder/cmd

      - name: Show included modules
        working-directory: ./otelcolbuilder/cmd
        run: |
          go version -m ${{ steps.set_filename.outputs.filename }} | \
          grep -E "/(receiver|exporter|processor|extension)/" | \
          tee otelcol-sumo-${{matrix.arch_os}}_modules.txt

      - name: Store binary as action artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.arch_os}}
          path: ./otelcolbuilder/cmd/${{ steps.set_filename.outputs.filename }}
          if-no-files-found: error

  package-msi:
    name: Package MSI
    runs-on: windows-2019
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      - name: Fetch binary artifact for windows/amd64
        uses: actions/download-artifact@v3
        with:
          name: windows_amd64
          path: ./otelcolbuilder/cmd

      - name: Rename binary for windows/amd64
        working-directory: ./otelcolbuilder/cmd
        run: mv otelcol-sumo-*-sumo-*-windows_amd64.exe otelcol-sumo-windows_amd64.exe

      - name: Sign binary
        uses: skymatic/code-sign-action@v1
        with:
          certificate: '${{ secrets.MICROSOFT_CERTIFICATE }}'
          password: '${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}'
          certificatesha1: '${{ secrets.MICROSOFT_CERTHASH }}'
          certificatename: '${{ secrets.MICROSOFT_CERTNAME }}'
          description: '${{ secrets.MICROSOFT_DESCRIPTION }}'
          folder: ./otelcolbuilder/cmd

      - name: Set VERSION_TAG
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set PRODUCT_VERSION
        run: echo "PRODUCT_VERSION=$(./ci/get_productversion.sh)" >> $GITHUB_ENV

      - name: Build MSI for windows/amd64
        working-directory: ./packaging/msi/wix
        run: msbuild.exe -p:Configuration=Release -p:Platform=x64 -p:ProductVersion=$PRODUCT_VERSION -Restore

      - name: Sign MSI
        uses: skymatic/code-sign-action@v1
        with:
          certificate: '${{ secrets.MICROSOFT_CERTIFICATE }}'
          password: '${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}'
          certificatesha1: '${{ secrets.MICROSOFT_CERTHASH }}'
          certificatename: '${{ secrets.MICROSOFT_CERTNAME }}'
          description: '${{ secrets.MICROSOFT_DESCRIPTION }}'
          folder: ./packaging/msi/wix/bin/x64/en-US

      - name: Store MSI as action artifact for windows/amd64
        uses: actions/upload-artifact@v3
        with:
          name: windows_amd64_msi
          path: ./packaging/msi/wix/bin/x64/en-US/*.msi
          if-no-files-found: error
